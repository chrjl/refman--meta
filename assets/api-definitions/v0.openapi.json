{"openapi":"3.0.0","info":{"version":"0.0.0","title":"refman v0 (file storage backend)","description":"Storage in flat JSON files, CRUD operations via `node:fs` (server `cbc7686`)","license":{"name":null}},"servers":[{"url":"/v0","description":"json-storage"}],"externalDocs":{"description":"Read more...","url":"https://github.com/chrjl/refman--docs/wiki/json-backend"},"paths":{"/items":{"get":{"summary":"All items in the collection, excluding trashed items.","description":"Reads file list (`fs.readdir`) of storage directory, filtering in files with `.json` extname.\n\nThen, depending on format specified in query, either:\n- Generate an item for each file and return an array of item objects.\n- Export an archive of all files in the collection directory.\n","tags":["items"],"parameters":[{"in":"query","name":"format","schema":{"type":"string","enum":["json","archive"]},"description":"`json` (default) will return a JSON array of all items.\n- Assign file name (without extname) to `key` field.\n- Read file (`fs.readFile`) and parse (`JSON.parse`) fields.\n\n`archive` will return a `.tgz` archive of all `.json` files in the collection directory.\n- Set the `Content-Type` header to `application/x-tar-gz`.\n- Set the `Content-Disposition` header to set the attachment filename.\n- Use the `tar` package to create an archive of the collection directory and pipe it to the response object.\n"}],"responses":{"200":{"content":{"application/json":{"schema":{"type":"array"}}}},"404":{"description":"`ENOENT` storage directory (Not Found)"}}},"delete":{"summary":"Delete multiple items","tags":["items"],"description":"See `DELETE /items/{itemKey}`","parameters":[{"name":"itemKey","in":"query","description":"Comma-separated list of `key`s of items to delete (to trash).","required":true,"example":"example1,example2,example3","allowReserved":true}],"responses":{"204":{"description":"The items were deleted (No Content)"},"400":{"description":"No `itemKeys` were provided (Bad Request)"}}},"post":{"summary":"Create an item","description":"Validate request:\n\n- Validate request body fields (i.e. `key` is a required field).\n- Validate path of file to be written.\n- Don't overwrite an item that already exists.\n\nThen write item (`fs.writeFile`) to a new file (`wx` flag).\n","tags":["items"],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Item"},"examples":{"example-201/409":{"value":{"key":"example","testField":"testValue"}},"example-403":{"description":"Tries to use a malformed `key` to post to a parent directory.","value":{"key":"../403example","title":"403 Forbidden"}},"example-400-itemKey":{"description":"Request body is missing `key`.","value":{"title":"400 Bad Request"}},"example-400-content":{"description":"Request body has no item fields.","value":{"key":"400example"}}}}}},"responses":{"201":{"description":"The request completed. See the response JSON for status of individual writes. (Created)","content":{"application/json":{"type":"object","example":{"key":"example"}}}},"400":{"description":"`ERR_INVALID_ARG_TYPE` (Bad Request)"},"403":{"description":"`EACCES` (Forbidden)"},"409":{"description":"`EEXIST` (Conflict)"}}}},"/items/{itemKey}":{"get":{"tags":["items"],"summary":"A specific item in the collection.","description":"Sends file (`res.sendFile`) with file name `id`, extname `.json`, from storage root directory\n","parameters":[{"$ref":"#/components/parameters/itemKey"}],"responses":{"200":{"content":{"application/json":{"schema":{"type":"object"}}}},"404":{"description":"`ENOENT` item file (Not Found)"}}},"delete":{"tags":["items"],"summary":"Delete an item.","description":"Link (`fs.link`) file to trash directory, then remove (`fs.unlink`) from collection directory\n","parameters":[{"$ref":"#/components/parameters/itemKey"}],"responses":{"204":{"description":"The item was deleted (No Content)"}}},"put":{"summary":"Full-item updating","description":"Validate request: path of file to be written\n\n- The primary key is taken from the `itemKey` request parameter, so `key` included in the request body will be silently ignored.\n\nOpen file for read and write (`fs.open` with `r+` flag), ensuring that the item exists before write. Then overwrite the file (`fileHandle.writeFile`).\n","tags":["items"],"parameters":[{"$ref":"#/components/parameters/itemKey"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Item"},"examples":{"example-OK":{"$ref":"#/components/schemas/Item/example"}}}}},"responses":{"204":{"description":"The item was successfully updated (No Content)"},"400":{"description":"Invalid type/field; unparseable JSON (Bad Request)"},"404":{"description":"`ENOENT` (Not Found)"}}},"patch":{"summary":"Partial-item updating","tags":["items"],"parameters":[{"$ref":"#/components/parameters/itemKey"}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object"},"example":{"keywords":["nodejs","expressjs","mongodb"]}}}},"responses":{"204":{"description":"The item was successfully updated (No Content)"},"400":{"description":"Invalid type/field; unparseable JSON (Bad Request)"},"404":{"description":"`ENOENT` (Not Found)"}}}}},"components":{"schemas":{"Item":{"type":"object","required":["key","ids","url"],"properties":{"key":{"type":"string","description":"name of file in collection (not a BibLaTeX field)"},"ids":{"type":"list","description":"BibLaTeX ids"},"url":{"type":"uri"},"keywords":{"type":"list"},"type":{"type":"string"},"entrysubtype":{"type":"string","description":"for use with @online type"},"author":{"type":"list"},"publisher":{"type":"list"},"title":{"type":"string"},"date":{"type":"string"},"urldate":{"type":"string","description":"access date"}},"example":{"value":{"title":"Express web framework (Node.js/JavaScript)","author":["MDN"],"publisher":["MDN"],"url":"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs","type":"online","entrysubtype":"collection","date":"2022-09-09","urldate":"2023-01-11","ids":["MDN_express"]}}}},"parameters":{"itemKey":{"in":"path","name":"itemKey","required":true,"schema":{"type":"string"},"description":"The item's primary key (in `json-storage` it corresponds to the file name, without extname)","examples":{"example-OK":{"value":"example"},"example-404":{"value":404}}}}},"tags":[]}